}
}
}
data_reduced <- data.frame() #data[,1:2]
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,h[i]]))
}
i
data_reduced <- numeric() #data[,1:2]
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,h[i]]))
}
View(data_reduced)
variables <- variables[h]
View(variables)
data <- data.frame(cbind(subjects,activity,rbind(x2,x1))) # Combined training and test data with 2 extra columns contain subject and activity factor variables
# Extract variables with mean and std-dev -------------------------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
variables <- variables[h] # Reduced list of variables
data_reduced <- data[,1:2]
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,2+h[i]]))
}
data <- data_reduced
View(data)
colnames(data,variables)
variables
as.list(variables)
help(setnames)
colnames(data) <- variables
View(data)
data <- data.frame(cbind(subjects,activity,rbind(x2,x1))) # Combined training and test data with 2 extra columns contain subject and activity factor variables
# Extract variables with mean and std-dev -------------------------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
variables <- variables[h] # Reduced list of variables
data_reduced <- data[,1:2]
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,2+h[i]]))
}
data <- data_reduced
colnames(data[,3:length(variables)]) <- variables
data <- data.frame(cbind(subjects,activity,rbind(x2,x1))) # Combined training and test data with 2 extra columns contain subject and activity factor variables
# Extract variables with mean and std-dev -------------------------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
variables <- variables[h] # Reduced list of variables
data_reduced <- numeric()
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,h[i]]))
}
colnames(data_reduced) <- variables
data <- cbind(data[,1:2],data_reduced)
view(data)
View(data)
data <- data.frame(cbind(subjects,activity,rbind(x2,x1))) # Combined training and test data with 2 extra columns contain subject and activity factor variables
# Extract variables with mean and std-dev -------------------------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
variables <- variables[h] # Reduced list of variables
data_reduced <- numeric()
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,h[i]]))
}
colnames(data_reduced) <- variables
View(data_reduced)
View(data)
data_reduced <- numeric()
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,h[i]]))
}
View(data_reduced)
data <- data.frame(cbind(subjects,activity,rbind(x2,x1))) # Combined training and test data with 2 extra columns contain subject and activity factor variables
# Extract variables with mean and std-dev -------------------------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
variables <- variables[h] # Reduced list of variables
data_reduced <- numeric()
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,2+h[i]]))
}
colnames(data_reduced) <- variables
data <- cbind(data[,1:2],data_reduced)
View(data)
help(rownames)
data$activity == 1
data$activity == 1 =  "walking"
list(102994)
library("dplr")
library("dplyr")
help(rename)
aname <- activity
aname[aname == 1] = 'walking'
View(aname)
activity[activity == 1] = 'Walking'
activity[activity == 2] = 'Walking_Upstairs'
activity[activity == 3] = 'Walking_Downstairs'
activity[activity == 4] = 'Sitting'
activity[activity == 5] = 'Standing'
activity[activity == 6] = 'Laying'
View(activity)
help(rownames)
## (1) Merge training and test set into one data set -----------------------------
subjects <- c(sub_train,sub_test)
activity <- c(ytrain,ytest)
# Combined training and test data with 2 extra columns
# containing subject and activity factor variables
data <- data.frame(cbind(subjects,activity,rbind(x2,x1)))
## (2) Extract variables with mean and std-dev -------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
data_reduced <- numeric()
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,2+h[i]]))
}
## (3) Uses descriptive activity names to name the activities in the data set
activity[activity == 1] = 'Walking'
activity[activity == 2] = 'Walking_Upstairs'
activity[activity == 3] = 'Walking_Downstairs'
activity[activity == 4] = 'Sitting'
activity[activity == 5] = 'Standing'
activity[activity == 6] = 'Laying'
data$activity <- activity
## (4) Appropriately labels the data set with descriptive variable names.
variables <- variables[h] # Reduced list of variables
colnames(data_reduced) <- variables
data <- cbind(data[,1:2],data_reduced)
View(data)
help(summarize)
library("ddply")
help(ddpy)
help(ddply)
## (1) Merge training and test set into one data set -----------------------------
subject <- c(sub_train,sub_test)
activity <- c(ytrain,ytest)
# Combined training and test data with 2 extra columns
# containing subject and activity factor variables
data <- data.frame(cbind(subject,activity,rbind(x2,x1)))
## (2) Extract variables with mean and std-dev -------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
data_reduced <- numeric()
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,2+h[i]]))
}
## (3) Uses descriptive activity names to name the activities in the data set
activity[activity == 1] = 'Walking'
activity[activity == 2] = 'Walking_Upstairs'
activity[activity == 3] = 'Walking_Downstairs'
activity[activity == 4] = 'Sitting'
activity[activity == 5] = 'Standing'
activity[activity == 6] = 'Laying'
data$activity <- activity
## (4) Appropriately labels the data set with descriptive variable names.
variables <- variables[h] # Reduced list of variables
colnames(data_reduced) <- variables
data <- cbind(data[,1:2],data_reduced)
tidy_data <- ddply(data, .(subject,activity),mean(data[3:length(variables)]))
library("plyr")
tidy_data <- ddply(data, .(subject,activity),mean(data[3:length(variables)]))
View(tidy_data)
mean(data[3:length(variables)])
help(tapply)
help ddply
help(ddply)
tidy_data <- ddply(data, .(subject,activity),summarize)
help(sapply)
help(tapply)
help(ddply)
i=3
data$variables[3]
variables
data[,2+i]
r <- list()
for (i in 1:length(variables)) {
r <- c(r,mean(data[,2+i])
}
r <- list()
for (i in 1:length(variables)) {
r <- c(r,mean(data[,2+i]))
}
r
data[[variable[1]]]
data[[variables[1]]]
data[variables[1]
]
data[,variables[1]]
data[variables[1]]
variables[1]
variables
to.list(variables)
as.list(variables)
aggregate(data[as.list(variables)],
by = data[c("subject","actvity")], FUN=mean)
data[variables]
colnames(data)
coln <- colnames(data)
coln[3:79]
coln[3:68]
colnames(data[,3:length(variables)])
data[coln]
aggregate(data[coln],
by = data[c("subject","actvity")], FUN=mean)
col_a <- colnames(data[,1:2])
col_b <- colnames(data[,3:length(variables)])
col_a
data[col_a]
aggregate(data[col_b], by = data[col_n], FUN=mean)
col_a <- colnames(data[,1:2])
col_b <- colnames(data[,3:length(variables)])
aggregate(data[col_b], by = data[col_a], FUN=mean)
tidy_data <- aggregate(data[col_b], by = data[col_a], FUN=mean)
View(tidy_data)
length(unique(activity)) * length(unique(subject))
help(write.table)
write_table(tidy-data,'OSoyemi_TidyDataSet.txt',row.name=FALSE)
tidy_data <- aggregate(data[col_b], by = data[col_a], FUN=mean)
write.table(tidy_data,'OSoyemi_TidyDataSet.txt',row.name=FALSE)
write.table(tidy_data,paste(dr,'//OSoyemi_TidyDataSet.txt',sep=''),row.name=FALSE)
getwd
getwd()
clc
source("run_analysis.R")
d <- run_analysis()
View(d)
install.packages("memisc")
library("codebook")
help(codebook)
help(Codebook)
codebook(d)
library("memisc")
help(codebook)
codebook(d0)
codebook(d)
d
codebook(tidy_data)
r <- codebook(tidy_data)
Data <- data.set(
vote = sample(c(1,2,3,8,9,97,99),size=300,replace=TRUE),
region = sample(c(rep(1,3),rep(2,2),3,99),size=300,replace=TRUE),
income = exp(rnorm(300,sd=.7))*2000
)
Data <- within(Data,{
description(vote) <- "Vote intention"
description(region) <- "Region of residence"
description(income) <- "Household income"
wording(vote) <- "If a general election would take place next tuesday,
the candidate of which party would you vote for?"
wording(income) <- "All things taken into account, how much do all
household members earn in sum?"
foreach(x=c(vote,region),{
measurement(x) <- "nominal"
})
measurement(income) <- "ratio"
labels(vote) <- c(
Conservatives = 1,
Labour = 2,
"Liberal Democrats" = 3,
"Don't know" = 8,
"Answer refused" = 9,
"Not applicable" = 97,
"Not asked in survey" = 99)
labels(region) <- c(
England = 1,
Scotland = 2,
Wales = 3,
"Not applicable" = 97,
"Not asked in survey" = 99)
foreach(x=c(vote,region,income),{
annotation(x)["Remark"] <- "This is not a real survey item, of course ..."
})
missing.values(vote) <- c(8,9,97,99)
missing.values(region) <- c(97,99)
})
r=codebook(Data)
r
View(variables)
summary(d)
Readme
Readme.Rmd
summary(tidy_data)
b <- summary(tidy_data)
view(b)
View(b)
write.table(b,'summary.txt')
str(tidy_data)
write.table(str(tidy_data),"summary.txt"
)
write.table(str(tidy_data),"summary.txt")
setwd("C://Users//solasoy//Dropbox//GitHub//Datasciencecoursera")
source("run_analysis")
source("run_analysis.R")
tidy_data <- run_analysis()
View(tidy_data)
dim(d)
length(variables)
colnames(tidy_data)
length(variables)
dim(data)
View(data)
# Combined training and test data with 2 extra columns
# containing subject and activity factor variables
data <- data.frame(cbind(subject,activity,rbind(x2,x1)))
## (2) Extract variables with mean and std-dev -------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
data_reduced <- numeric()
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,2+h[i]]))
}
## (3) Uses descriptive activity names to name the activities in the data set ----------------
activity[activity == 1] = 'Walking'
activity[activity == 2] = 'Walking_Upstairs'
activity[activity == 3] = 'Walking_Downstairs'
activity[activity == 4] = 'Sitting'
activity[activity == 5] = 'Standing'
activity[activity == 6] = 'Laying'
data$activity <- activity
## (4) Appropriately labels the data set with descriptive variable names ---------------
variables <- variables[h] # Reduced list of variables
colnames(data_reduced) <- variables
data <- cbind(data[,1:2],data_reduced)
View(data)
View(data)
View(data)
View(data_reduced)
View(data_reduced)
col_a <- colnames(data[,1:2]) # subject and activity
col_b <- colnames(data[,3:length(variables)]) # other variables
tidy_data <- aggregate(data[col_b], by = data[col_a], FUN=mean)
View(tidy_data)
View(tidy_data)
View(tidy_data)
setwd("C://Users//solasoy//Dropbox//GitHub//Datasciencecoursera")
# Load Dataset ------------------------------
dr = "C://Users//solasoy//Dropbox//GitHub//Datasciencecoursera"
writeflag = 0
paste(dr,"//test//","X_test.txt",sep="")
x1 <- read.table(paste(dr,"//test//","X_test.txt",sep=""))
x2 <- read.table(paste(dr,"//train//","X_train.txt",sep=""))
sub_train <- read.table(paste(dr,"//train//","subject_train.txt",sep=""))
sub_test <- read.table(paste(dr,"//test//","subject_test.txt",sep=""))
sub_train <- as.numeric(sub_train[,1])
train_id <- unique(sub_train)
sub_test <- as.numeric(sub_test[,1])
test_id  <- unique(sub_test)
ytrain <- read.table(paste(dr,"//train//","y_train.txt",sep=""))
ytest <- read.table(paste(dr,"//test//","y_test.txt",sep=""))
ytrain <- as.numeric(ytrain[,1])
ytest <- as.numeric(ytest[,1])
## (1) Merge training and test set into one data set -----------------------------
subject <- c(sub_train,sub_test)
activity <- c(ytrain,ytest)
# Combined training and test data with 2 extra columns
# containing subject and activity factor variables
data <- data.frame(cbind(subject,activity,rbind(x2,x1)))
View(data)
head(data)
View(head(data))
## (2) Extract variables with mean and std-dev -------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
data_reduced <- numeric()
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,2+h[i]]))
}
data <- cbind(data[,1:2],data_reduced)
data <- data.frame(cbind(subject,activity,rbind(x2,x1)))
## (2) Extract variables with mean and std-dev -------------------
variables <- read.table(paste(dr,"//features.txt",sep=""))
variables <- variables[,2]
h <- numeric()
for (i in 1:length(variables)) {
if (!is.na(grep("-mean()",variables[i])==1 || grep("-std()",variables[i])==1)) {
if (isTRUE(grep("-meanFreq()",variables[i])==1)) {
next
}
else {
h <- c(h,i)
}
}
}
data_reduced <- numeric()
for (i in 1:length(h)) {
data_reduced <- data.frame(cbind(data_reduced,data[,2+h[i]]))
}
## (3) Uses descriptive activity names to name the activities in the data set ----------------
activity[activity == 1] = 'Walking'
activity[activity == 2] = 'Walking_Upstairs'
activity[activity == 3] = 'Walking_Downstairs'
activity[activity == 4] = 'Sitting'
activity[activity == 5] = 'Standing'
activity[activity == 6] = 'Laying'
data$activity <- activity
## (4) Appropriately labels the data set with descriptive variable names ---------------
variables <- variables[h] # Reduced list of variables
colnames(data_reduced) <- variables
data <- cbind(data[,1:2],data_reduced)
col_a <- colnames(data[,1:2]) # subject and activity
col_b <- colnames(data[,3:length(variables)]) # other variables
tidy_data <- aggregate(data[col_b], by = data[col_a], FUN=mean)
head(tidy_data,10)
variables
colnames(tidydata)
colnames(tidy_data)
colnames(data)
col_a <- colnames(data[,1:2]) # subject and activity
col_b <- colnames(data[,3:dim(data)[2]]) # other variables
tidy_data <- aggregate(data[col_b], by = data[col_a], FUN=mean)
dr
write.table(tidy_data,paste(dr,'//OSoyemi_TidyDataSet.txt',sep=''),row.name=FALSE)
colnames(data[,3:dim(data)[2]])
